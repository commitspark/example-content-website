# Required for Contentlab to determine which content types have their own identity
directive @Entry on OBJECT

# This lets us tell the contentlab.sh user interface which field(s) of @Entry types should be shown in list views
directive @Ui(visibleList:Boolean) on FIELD_DEFINITION

# A type with `@Entry` directive has its own identity and can be referenced elsewhere
type Page @Entry {
    id: ID! # Required for all types with `@Entry` directive
    title: String! @Ui(visibleList:true)
    contentElements: [ContentElement!]!
    slug: String! @Ui(visibleList:true)
    seo: SEO
}

# Individual components of content that make up a page; extend this with additional elements as needed
union ContentElement =
    | Hero
    | SectionTitle
    | Body

# Types that don't have @Entry can only exist as siblings of an @Entry type and do not have their own identity
type Hero {
    heading: String!
    image: ImageReference
    imagePosition: ImagePosition
}

type SectionTitle {
    heading: String!
    body: String!
}

type ImageReference {
    absoluteUrl: String!
    width: Int!
    height: Int!
    altText: String!
}

enum ImagePosition {
    aboveHeading
    belowHeading
}

# Our header exists independent of pages and therefore gets its own @Entry identity
type Header @Entry {
    id: ID!
    headerMenuEntries: [HeaderMenuEntry!]!
}

type HeaderMenuEntry {
    label: String!
    # `Page` has `@Entry`, so only the page ID is stored here; when querying, this reference is resolved automatically
    linkTo: Page!
}

type Body {
    body: String!
}

type SEO {
    metaTags: [MetaTag!]!
    # This is just an example; extend with additional fields as needed
}

type MetaTag {
    name: String!
    value: String!
}
